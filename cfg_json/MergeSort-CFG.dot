digraph MergeSort_CFG {
  // graph-vertices
  v1  [label="3:  double[] merge(double[] a, double[] b)"];
  v2  [label="4:  double[] c = new double[a.length + b.length]"];
  v3  [label="5:  int i = 0, j = 0"];
  v4  [label="6:  int k = 0"];
  v5  [label="6:  for (k < c.length)"];
  v6  [label="6:  k++"];
  v7  [label="endfor"];
  v8  [label="7:  if (i >= a.length)"];
  v9  [label="7:  c[k] = b[j++]"];
  v10  [label="endif"];
  v11  [label="8:  if (j >= b.length)"];
  v12  [label="8:  c[k] = a[i++]"];
  v13  [label="endif"];
  v14  [label="9:  if (a[i] <= b[j])"];
  v15  [label="9:  c[k] = a[i++]"];
  v16  [label="endif"];
  v17  [label="10:  c[k] = b[j++]"];
  v18  [label="12:  return c;"];
  v19  [label="15:  double[] mergesort(double[] input)"];
  v20  [label="16:  int N = input.length"];
  v21  [label="17:  if (N <= 1)"];
  v22  [label="17:  return input;"];
  v23  [label="endif"];
  v24  [label="18:  double[] a = new double[N/2]"];
  v25  [label="19:  double[] b = new double[N - N/2]"];
  v26  [label="20:  int i = 0"];
  v27  [label="20:  for (i < a.length)"];
  v28  [label="20:  i++"];
  v29  [label="endfor"];
  v30  [label="21:  a[i] = input[i]"];
  v31  [label="22:  int i = 0"];
  v32  [label="22:  for (i < b.length)"];
  v33  [label="22:  i++"];
  v34  [label="endfor"];
  v35  [label="23:  b[i] = input[i + N/2]"];
  v36  [label="24:  return merge(mergesort(a), mergesort(b));"];
  v37  [label="27:  boolean isSorted(double[] a)"];
  v38  [label="28:  int i = 1"];
  v39  [label="28:  for (i < a.length)"];
  v40  [label="28:  i++"];
  v41  [label="endfor"];
  v42  [label="29:  if (a[i] < a[i-1])"];
  v43  [label="29:  return false;"];
  v44  [label="endif"];
  v45  [label="30:  return true;"];
  // graph-edges
  v1 -> v2;
  v2 -> v3;
  v3 -> v4;
  v4 -> v5;
  v5 -> v7  [label="False"];
  v5 -> v8  [label="True"];
  v8 -> v9  [label="True"];
  v9 -> v10;
  v8 -> v11  [label="False"];
  v11 -> v12  [label="True"];
  v12 -> v13;
  v11 -> v14  [label="False"];
  v14 -> v15  [label="True"];
  v15 -> v16;
  v14 -> v17  [label="False"];
  v17 -> v16;
  v16 -> v13;
  v13 -> v10;
  v10 -> v6;
  v6 -> v5;
  v7 -> v18;
  v19 -> v20;
  v20 -> v21;
  v21 -> v22  [label="True"];
  v21 -> v23  [label="False"];
  v23 -> v24;
  v24 -> v25;
  v25 -> v26;
  v26 -> v27;
  v27 -> v29  [label="False"];
  v27 -> v30  [label="True"];
  v30 -> v28;
  v28 -> v27;
  v29 -> v31;
  v31 -> v32;
  v32 -> v34  [label="False"];
  v32 -> v35  [label="True"];
  v35 -> v33;
  v33 -> v32;
  v34 -> v36;
  v37 -> v38;
  v38 -> v39;
  v39 -> v41  [label="False"];
  v39 -> v42  [label="True"];
  v42 -> v43  [label="True"];
  v42 -> v44  [label="False"];
  v44 -> v40;
  v40 -> v39;
  v41 -> v45;
  // end-of-graph
}
