[
    {
        "difference": "@@ -17 +17 @@\n-            while (bound < data[upper]) {\n+            while (bound == data[upper]) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -17 +17 @@\n-            while (bound < data[upper]) {\n+            while (bound != data[upper]) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -13 +13 @@\n-        while (lower <= upper) {\n+        while (lower > upper) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -43 +43 @@\n-                max = i;\n+                max = --i;",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, first, (last) / 2 );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -52 +52 @@\n-        int tmp = data[i];\n+        int tmp = data[i++];",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -23 +23 @@\n-                lower++;\n+                 ;",
        "equivalence": false,
        "operator": "ADL"
    },
    {
        "difference": "@@ -47 +47 @@\n-        quicksort( data, 0, data.length - 2 );\n+        quicksort( data, 0, data.length );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -37 +37 @@\n-        if (data.length < 2) {\n+        if (!(data.length < 2)) {",
        "equivalence": false,
        "operator": "SEOI"
    },
    {
        "difference": "@@ -13 +13 @@\n-        while (lower <= upper) {\n+        while (~lower <= upper) {",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -41 +41 @@\n-        for (int i = 1; i < data.length; i++) {\n+        for (int i = 1; --i < data.length; i++) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -30 +30 @@\n-        if (upper + 1 < last) {\n+        if (upper + 1 <= last) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -20,5 +19,0 @@\n-            if (lower < upper) {\n-                swap( data, lower++, upper-- );\n-            } else {\n-                lower++;\n-            }",
        "equivalence": false,
        "operator": "ISDL"
    },
    {
        "difference": "@@ -21 +21 @@\n-                swap( data, lower++, upper-- );\n+                swap( data, lower, upper-- );",
        "equivalence": false,
        "operator": "AODS"
    },
    {
        "difference": "@@ -28 +28 @@\n-            quicksort( data, first, upper - 1 );\n+            quicksort( data, first, upper * 1 );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -17 +17 @@\n-            while (bound < data[upper]) {\n+            while (bound < data[upper--]) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -30 +30 @@\n-        if (upper + 1 < last) {\n+        if (++upper + 1 < last) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -21 +20,0 @@\n-                swap( data, lower++, upper-- );",
        "equivalence": false,
        "operator": "FCDL"
    },
    {
        "difference": "@@ -20 +20 @@\n-            if (lower < upper) {\n+            if (lower < upper--) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -13 +13 @@\n-        while (lower <= upper) {\n+        while (lower <= --upper) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, first++, (first + last) / 2 );",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -28 +28 @@\n-            quicksort( data, first, upper - 1 );\n+            quicksort( data, ~first, upper - 1 );",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -41 +41 @@\n-        for (int i = 1; i < data.length; i++) {\n+        for (int i = 1; i++ < data.length; i++) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -31 +31 @@\n-            quicksort( data, upper + 1, last );\n+            quicksort( data, upper++ + 1, last );",
        "equivalence": true,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -30 +30 @@\n-        if (upper + 1 < last) {\n+        if (~upper + 1 < last) {",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -42 +42 @@\n-            if (data[max] < data[i]) {\n+            if (data[--max] < data[i]) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -14 +14 @@\n-            while (bound > data[lower]) {\n+            while (bound > data[--lower]) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -42 +42 @@\n-            if (data[max] < data[i]) {\n+            if (data[max] != data[i]) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -30 +30 @@\n-        if (upper + 1 < last) {\n+        if (upper / 1 < last) {",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -43 +42,0 @@\n-                max = i;",
        "equivalence": false,
        "operator": "ADL"
    },
    {
        "difference": "@@ -54 +54 @@\n-        data[j] = tmp;\n+        data[~j] = tmp;",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -27 +27 @@\n-        if (first < upper - 1) {\n+        if (first < upper++ - 1) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -17 +17 @@\n-            while (bound < data[upper]) {\n+            while (bound < data[~upper]) {",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -20 +20 @@\n-            if (lower < upper) {\n+            if (lower != upper) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -14 +14 @@\n-            while (bound > data[lower]) {\n+            while (!(bound > data[lower])) {",
        "equivalence": false,
        "operator": "SEOI"
    },
    {
        "difference": "@@ -28 +28 @@\n-            quicksort( data, first, upper - 1 );\n+            quicksort( data, first, upper + 1 );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -9 +9 @@\n-        int lower = first + 1;\n+        int lower = first * 1;",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -31 +31 @@\n-            quicksort( data, upper + 1, last );\n+            quicksort( data, upper - 1, last );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -20 +20 @@\n-            if (lower < upper) {\n+            if (++lower < upper) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -14 +14 @@\n-            while (bound > data[lower]) {\n+            while (bound >= data[lower]) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, first, first + last + 2 );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -9 +9 @@\n-        int lower = first + 1;\n+        int lower = first++ + 1;",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -41 +41 @@\n-        for (int i = 1; i < data.length; i++) {\n+        for (int i = 1; i-- < data.length; i++) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -31 +31 @@\n-            quicksort( data, upper + 1, last );\n+            quicksort( data, upper * 1, last );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, first, (first++ + last) / 2 );",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -11 +10,0 @@\n-        swap( data, first, (first + last) / 2 );",
        "equivalence": false,
        "operator": "FCDL"
    },
    {
        "difference": "@@ -20 +20 @@\n-            if (lower < upper) {\n+            if (lower == upper) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -31 +31 @@\n-            quicksort( data, upper + 1, last );\n+            quicksort( data, 1, last );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -27 +27 @@\n-        if (first < upper - 1) {\n+        if (++first < upper - 1) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -21 +21 @@\n-                swap( data, lower++, upper-- );\n+                swap( data, lower++, ~upper-- );",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -26 +26 @@\n-        swap( data, upper, first );\n+        swap( data, upper--, first );",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -12 +12 @@\n-        int bound = data[first];\n+        int bound = data[~first];",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, first--, (first + last) / 2 );",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -23 +23 @@\n-                lower++;\n+                lower--;",
        "equivalence": false,
        "operator": "AORS"
    },
    {
        "difference": "@@ -41 +41 @@\n-        for (int i = 1; i < data.length; i++) {\n+        for (int i = 1; !(i < data.length); i++) {",
        "equivalence": false,
        "operator": "SEOI"
    },
    {
        "difference": "@@ -28 +28 @@\n-            quicksort( data, first, upper - 1 );\n+            quicksort( data, first, upper % 1 );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -20 +20 @@\n-            if (lower < upper) {\n+            if (lower < upper++) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, first, (first) / 2 );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -26 +26 @@\n-        swap( data, upper, first );\n+        swap( data, ~upper, first );",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -28 +28 @@\n-            quicksort( data, first, upper - 1 );\n+            quicksort( data, first, upper );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -17 +17 @@\n-            while (bound < data[upper]) {\n+            while (bound > data[upper]) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -9 +9 @@\n-        int lower = first + 1;\n+        int lower = ~first + 1;",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -17 +17 @@\n-            while (bound < data[upper]) {\n+            while (bound < data[++upper]) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -28 +28 @@\n-            quicksort( data, first, upper - 1 );\n+            quicksort( data, -first, upper - 1 );",
        "equivalence": false,
        "operator": "AOIU"
    },
    {
        "difference": "@@ -37 +37 @@\n-        if (data.length < 2) {\n+        if (data.length <= 2) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -47 +47 @@\n-        quicksort( data, 0, data.length - 2 );\n+        quicksort( data, 0, -data.length - 2 );",
        "equivalence": false,
        "operator": "AOIU"
    },
    {
        "difference": "@@ -30 +30 @@\n-        if (upper + 1 < last) {\n+        if (upper % 1 < last) {",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -42 +42 @@\n-            if (data[max] < data[i]) {\n+            if (data[max] < data[--i]) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -30 +30 @@\n-        if (upper + 1 < last) {\n+        if (upper + 1 < last--) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -18 +18 @@\n-                upper--;\n+                upper++;",
        "equivalence": false,
        "operator": "AORS"
    },
    {
        "difference": "@@ -47 +47 @@\n-        quicksort( data, 0, data.length - 2 );\n+        quicksort( data, 0, data.length % 2 );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -53 +53 @@\n-        data[i] = data[j];\n+        data[i] = data[-j];",
        "equivalence": false,
        "operator": "AOIU"
    },
    {
        "difference": "@@ -27 +27 @@\n-        if (first < upper - 1) {\n+        if (!(first < upper - 1)) {",
        "equivalence": false,
        "operator": "SEOI"
    },
    {
        "difference": "@@ -41 +41 @@\n-        for (int i = 1; i < data.length; i++) {\n+        for (int i = 1; ~i < data.length; i++) {",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -14 +14 @@\n-            while (bound > data[lower]) {\n+            while (bound == data[lower]) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -30 +30 @@\n-        if (upper + 1 < last) {\n+        if (upper + 1 < last++) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -14 +14 @@\n-            while (bound > data[lower]) {\n+            while (bound > data[lower++]) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, first, (first + --last) / 2 );",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -30,3 +29,0 @@\n-        if (upper + 1 < last) {\n-            quicksort( data, upper + 1, last );\n-        }",
        "equivalence": false,
        "operator": "ISDL"
    },
    {
        "difference": "@@ -17 +17 @@\n-            while (bound < data[upper]) {\n+            while (bound++ < data[upper]) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -46 +46 @@\n-        swap( data, data.length - 1, max );\n+        swap( data, data.length / 1, max );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -37 +37 @@\n-        if (data.length < 2) {\n+        if (true) {",
        "equivalence": false,
        "operator": "CDL"
    },
    {
        "difference": "@@ -14 +14 @@\n-            while (bound > data[lower]) {\n+            while (++bound > data[lower]) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -37 +37 @@\n-        if (data.length < 2) {\n+        if (data.length >= 2) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -41 +41 @@\n-        for (int i = 1; i < data.length; i++) {\n+        for (int i = 1; i <= data.length; i++) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -14 +14 @@\n-            while (bound > data[lower]) {\n+            while (bound > data[++lower]) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -17 +17 @@\n-            while (bound < data[upper]) {\n+            while (++bound < data[upper]) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, first, (first + ~last) / 2 );",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, first, (++first + last) / 2 );",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -30 +30 @@\n-        if (upper + 1 < last) {\n+        if (upper++ + 1 < last) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -9 +9 @@\n-        int lower = first + 1;\n+        int lower = first / 1;",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -53 +53 @@\n-        data[i] = data[j];\n+        data[i] = data[--j];",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -28 +28 @@\n-            quicksort( data, first, upper - 1 );\n+            quicksort( data, first, -upper - 1 );",
        "equivalence": false,
        "operator": "AOIU"
    },
    {
        "difference": "@@ -26 +26 @@\n-        swap( data, upper, first );\n+        swap( data, upper++, first );",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, first, (first + ++last) / 2 );",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -13 +13 @@\n-        while (lower <= upper) {\n+        while (lower <= upper++) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, first, (first - last) / 2 );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -15 +14,0 @@\n-                lower++;",
        "equivalence": false,
        "operator": "ADL"
    },
    {
        "difference": "@@ -30 +30 @@\n-        if (upper + 1 < last) {\n+        if (upper - 1 < last) {",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -46 +46 @@\n-        swap( data, data.length - 1, max );\n+        swap( data, data.length - 1, ~max );",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -17 +17 @@\n-            while (bound < data[upper]) {\n+            while (--bound < data[upper]) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -28 +28 @@\n-            quicksort( data, first, upper - 1 );\n+            quicksort( data, first, --upper - 1 );",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -47 +47 @@\n-        quicksort( data, 0, data.length - 2 );\n+        quicksort( data, 0, data.length + 2 );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -27 +27 @@\n-        if (first < upper - 1) {\n+        if (first != upper - 1) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -13,13 +12,0 @@\n-        while (lower <= upper) {\n-            while (bound > data[lower]) {\n-                lower++;\n-            }\n-            while (bound < data[upper]) {\n-                upper--;\n-            }\n-            if (lower < upper) {\n-                swap( data, lower++, upper-- );\n-            } else {\n-                lower++;\n-            }\n-        }",
        "equivalence": false,
        "operator": "WLDL"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, first, (first % last) / 2 );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -9 +9 @@\n-        int lower = first + 1;\n+        int lower = ++first + 1;",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -54 +54 @@\n-        data[j] = tmp;\n+        data[j] = ++tmp;",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -10 +10 @@\n-        int upper = last;\n+        int upper = ~last;",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -12 +12 @@\n-        int bound = data[first];\n+        int bound = data[-first];",
        "equivalence": false,
        "operator": "AOIU"
    },
    {
        "difference": "@@ -21 +21 @@\n-                swap( data, lower++, upper-- );\n+                swap( data, lower--, upper-- );",
        "equivalence": false,
        "operator": "AORS"
    },
    {
        "difference": "@@ -30 +30 @@\n-        if (upper + 1 < last) {\n+        if (false) {",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -30 +30 @@\n-        if (upper + 1 < last) {\n+        if (upper-- + 1 < last) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -17 +17 @@\n-            while (bound < data[upper]) {\n+            while (bound < data[--upper]) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -13 +13 @@\n-        while (lower <= upper) {\n+        while (lower < upper) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -28 +27,0 @@\n-            quicksort( data, first, upper - 1 );",
        "equivalence": false,
        "operator": "FCDL"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, first, first + last - 2 );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -43 +43 @@\n-                max = i;\n+                max = ++i;",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -18 +18 @@\n-                upper--;\n+                 ;",
        "equivalence": false,
        "operator": "ADL"
    },
    {
        "difference": "@@ -21 +21 @@\n-                swap( data, lower++, upper-- );\n+                swap( data, lower++, upper++ );",
        "equivalence": false,
        "operator": "AORS"
    },
    {
        "difference": "@@ -12 +12 @@\n-        int bound = data[first];\n+        int bound = data[first--];",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -47 +47 @@\n-        quicksort( data, 0, data.length - 2 );\n+        quicksort( data, 0, data.length / 2 );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -26 +26 @@\n-        swap( data, upper, first );\n+        swap( data, -upper, first );",
        "equivalence": false,
        "operator": "AOIU"
    },
    {
        "difference": "@@ -20 +20 @@\n-            if (lower < upper) {\n+            if (lower > upper) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -54 +54 @@\n-        data[j] = tmp;\n+        data[j] = -tmp;",
        "equivalence": false,
        "operator": "AOIU"
    },
    {
        "difference": "@@ -41 +41 @@\n-        for (int i = 1; i < data.length; i++) {\n+        for (int i = 1; i >= data.length; i++) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -30 +30 @@\n-        if (upper + 1 < last) {\n+        if (upper * 1 < last) {",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -14,3 +13,0 @@\n-            while (bound > data[lower]) {\n-                lower++;\n-            }",
        "equivalence": false,
        "operator": "WLDL"
    },
    {
        "difference": "@@ -46 +46 @@\n-        swap( data, data.length - 1, max );\n+        swap( data, 1, max );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -46 +46 @@\n-        swap( data, data.length - 1, max );\n+        swap( data, data.length * 1, max );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -31 +31 @@\n-            quicksort( data, upper + 1, last );\n+            quicksort( data, upper-- + 1, last );",
        "equivalence": true,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -13 +13 @@\n-        while (lower <= upper) {\n+        while (--lower <= upper) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -41 +41 @@\n-        for (int i = 1; i < data.length; i++) {\n+        for (int i = 1; i < data.length;  ) {",
        "equivalence": false,
        "operator": "AODS"
    },
    {
        "difference": "@@ -30 +30 @@\n-        if (upper + 1 < last) {\n+        if (upper + 1 == last) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -28 +28 @@\n-            quicksort( data, first, upper - 1 );\n+            quicksort( data, first, upper++ - 1 );",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -27 +27 @@\n-        if (first < upper - 1) {\n+        if (--first < upper - 1) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -42 +42 @@\n-            if (data[max] < data[i]) {\n+            if (data[max] < data[~i]) {",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -46 +46 @@\n-        swap( data, data.length - 1, max );\n+        swap( data, ~data.length - 1, max );",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -30 +30 @@\n-        if (upper + 1 < last) {\n+        if (--upper + 1 < last) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -43 +43 @@\n-                max = i;\n+                max = -i;",
        "equivalence": false,
        "operator": "AOIU"
    },
    {
        "difference": "@@ -27 +27 @@\n-        if (first < upper - 1) {\n+        if (first++ < upper - 1) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, first, 2 );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -30 +30 @@\n-        if (upper + 1 < last) {\n+        if (!(upper + 1 < last)) {",
        "equivalence": false,
        "operator": "SEOI"
    },
    {
        "difference": "@@ -17 +17 @@\n-            while (bound < data[upper]) {\n+            while (bound <= data[upper]) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -17 +17 @@\n-            while (bound < data[upper]) {\n+            while (~bound < data[upper]) {",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -27 +27 @@\n-        if (first < upper - 1) {\n+        if (false) {",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -21 +21 @@\n-                swap( data, lower++, upper-- );\n+                swap( data, lower++, upper );",
        "equivalence": false,
        "operator": "AODS"
    },
    {
        "difference": "@@ -23 +22,0 @@\n-                lower++;",
        "equivalence": false,
        "operator": "ADL"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, first, (--first + last) / 2 );",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -31 +31 @@\n-            quicksort( data, upper + 1, last );\n+            quicksort( data, ++upper + 1, last );",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -13 +13 @@\n-        while (lower <= upper) {\n+        while (lower-- <= upper) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -9 +9 @@\n-        int lower = first + 1;\n+        int lower = first - 1;",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -20 +20 @@\n-            if (lower < upper) {\n+            if (~lower < upper) {",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -42 +42 @@\n-            if (data[max] < data[i]) {\n+            if (data[max] >= data[i]) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -37 +37 @@\n-        if (data.length < 2) {\n+        if (data.length != 2) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -14 +14 @@\n-            while (bound > data[lower]) {\n+            while (bound != data[lower]) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -27 +27 @@\n-        if (first < upper - 1) {\n+        if (first > upper - 1) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -31 +31 @@\n-            quicksort( data, upper + 1, last );\n+            quicksort( data, upper + 1, last++ );",
        "equivalence": true,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -54 +54 @@\n-        data[j] = tmp;\n+        data[j] = --tmp;",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -13 +13 @@\n-        while (lower <= upper) {\n+        while (lower != upper) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -41 +41 @@\n-        for (int i = 1; i < data.length; i++) {\n+        for (int i = 1; ++i < data.length; i++) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -54 +54 @@\n-        data[j] = tmp;\n+        data[j] = ~tmp;",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -53 +53 @@\n-        data[i] = data[j];\n+        data[i] = data[++j];",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, ~first, (first + last) / 2 );",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -9 +9 @@\n-        int lower = first + 1;\n+        int lower = --first + 1;",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -27 +27 @@\n-        if (first < upper - 1) {\n+        if (first <= upper - 1) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -41 +41 @@\n-        for (int i = 1; i < data.length; i++) {\n+        for (int i = 1; i > data.length; i++) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -27 +27 @@\n-        if (first < upper - 1) {\n+        if (first-- < upper - 1) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -10 +10 @@\n-        int upper = last;\n+        int upper = -last;",
        "equivalence": false,
        "operator": "AOIU"
    },
    {
        "difference": "@@ -52 +52 @@\n-        int tmp = data[i];\n+        int tmp = data[i--];",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -10 +10 @@\n-        int upper = last;\n+        int upper = last--;",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -47 +47 @@\n-        quicksort( data, 0, data.length - 2 );\n+        quicksort( data, 0, data.length * 2 );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -20 +20 @@\n-            if (lower < upper) {\n+            if (lower >= upper) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -27 +27 @@\n-        if (first < upper - 1) {\n+        if (first < upper * 1) {",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -31 +31 @@\n-            quicksort( data, upper + 1, last );\n+            quicksort( data, -upper + 1, last );",
        "equivalence": false,
        "operator": "AOIU"
    },
    {
        "difference": "@@ -28 +28 @@\n-            quicksort( data, first, upper - 1 );\n+            quicksort( data, first, upper / 1 );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -17 +17 @@\n-            while (bound < data[upper]) {\n+            while (bound >= data[upper]) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -27 +27 @@\n-        if (first < upper - 1) {\n+        if (~first < upper - 1) {",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -13 +13 @@\n-        while (lower <= upper) {\n+        while (lower == upper) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -46 +46 @@\n-        swap( data, data.length - 1, max );\n+        swap( data, data.length + 1, max );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, first, (-first + last) / 2 );",
        "equivalence": false,
        "operator": "AOIU"
    },
    {
        "difference": "@@ -42 +42 @@\n-            if (data[max] < data[i]) {\n+            if (data[max] < data[++i]) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -15 +15 @@\n-                lower++;\n+                lower--;",
        "equivalence": false,
        "operator": "AORS"
    },
    {
        "difference": "@@ -14 +14 @@\n-            while (bound > data[lower]) {\n+            while (bound++ > data[lower]) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -14 +14 @@\n-            while (bound > data[lower]) {\n+            while (--bound > data[lower]) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -9 +9 @@\n-        int lower = first + 1;\n+        int lower = 1;",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -31 +30,0 @@\n-            quicksort( data, upper + 1, last );",
        "equivalence": false,
        "operator": "FCDL"
    },
    {
        "difference": "@@ -28 +28 @@\n-            quicksort( data, first, upper - 1 );\n+            quicksort( data, first, ~upper - 1 );",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -43 +43 @@\n-                max = i;\n+                max = ~i;",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -13 +13 @@\n-        while (lower <= upper) {\n+        while (lower >= upper) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -20 +20 @@\n-            if (lower < upper) {\n+            if (true) {",
        "equivalence": false,
        "operator": "ROD"
    },
    {
        "difference": "@@ -13 +13 @@\n-        while (lower <= upper) {\n+        while (++lower <= upper) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -43 +43 @@\n-                max = i;\n+                max = i++;",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -26 +26 @@\n-        swap( data, upper, first );\n+        swap( data, upper, ~first );",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -43 +43 @@\n-                max = i;\n+                max = i--;",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -13 +13 @@\n-        while (lower <= upper) {\n+        while (lower <= ~upper) {",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, first, (first + last) % 2 );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -20 +20 @@\n-            if (lower < upper) {\n+            if (lower <= upper) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -37 +37 @@\n-        if (data.length < 2) {\n+        if (data.length == 2) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -41,5 +40,0 @@\n-        for (int i = 1; i < data.length; i++) {\n-            if (data[max] < data[i]) {\n-                max = i;\n-            }\n-        }",
        "equivalence": false,
        "operator": "FLDL"
    },
    {
        "difference": "@@ -9 +9 @@\n-        int lower = first + 1;\n+        int lower = first-- + 1;",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -17,3 +16,0 @@\n-            while (bound < data[upper]) {\n-                upper--;\n-            }",
        "equivalence": false,
        "operator": "WLDL"
    },
    {
        "difference": "@@ -46 +46 @@\n-        swap( data, data.length - 1, max );\n+        swap( data, data.length - 1, max++ );",
        "equivalence": true,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -42 +42 @@\n-            if (data[max] < data[i]) {\n+            if (data[~max] < data[i]) {",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -31 +31 @@\n-            quicksort( data, upper + 1, last );\n+            quicksort( data, --upper + 1, last );",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -41 +41 @@\n-        for (int i = 1; i < data.length; i++) {\n+        for (int i = 1; i < data.length; i--) {",
        "equivalence": false,
        "operator": "AORS"
    },
    {
        "difference": "@@ -42 +42 @@\n-            if (data[max] < data[i]) {\n+            if (!(data[max] < data[i])) {",
        "equivalence": false,
        "operator": "SEOI"
    },
    {
        "difference": "@@ -42 +42 @@\n-            if (data[max] < data[i]) {\n+            if (data[++max] < data[i]) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -18 +17,0 @@\n-                upper--;",
        "equivalence": false,
        "operator": "ADL"
    },
    {
        "difference": "@@ -27 +27 @@\n-        if (first < upper - 1) {\n+        if (first < upper-- - 1) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -27 +27 @@\n-        if (first < upper - 1) {\n+        if (first == upper - 1) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, first, (~first + last) / 2 );",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -52 +52 @@\n-        int tmp = data[i];\n+        int tmp = data[-i];",
        "equivalence": false,
        "operator": "AOIU"
    },
    {
        "difference": "@@ -42 +42 @@\n-            if (data[max] < data[i]) {\n+            if (data[max] < data[i++]) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -27 +27 @@\n-        if (first < upper - 1) {\n+        if (first < ++upper - 1) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -42,3 +41,0 @@\n-            if (data[max] < data[i]) {\n-                max = i;\n-            }",
        "equivalence": false,
        "operator": "ISDL"
    },
    {
        "difference": "@@ -41 +41 @@\n-        for (int i = 1; i < data.length; i++) {\n+        for (int i = 1; i < ~data.length; i++) {",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -27 +27 @@\n-        if (first < upper - 1) {\n+        if (first >= upper - 1) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -30 +30 @@\n-        if (upper + 1 < last) {\n+        if (upper + 1 > last) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -10 +10 @@\n-        int upper = last;\n+        int upper = last++;",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -42 +42 @@\n-            if (data[max] < data[i]) {\n+            if (data[max++] < data[i]) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -30 +30 @@\n-        if (upper + 1 < last) {\n+        if (1 < last) {",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, first, (first + last) * 2 );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -53 +53 @@\n-        data[i] = data[j];\n+        data[~i] = data[j];",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -27 +27 @@\n-        if (first < upper - 1) {\n+        if (first < upper / 1) {",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -42 +42 @@\n-            if (data[max] < data[i]) {\n+            if (false) {",
        "equivalence": false,
        "operator": "ROD"
    },
    {
        "difference": "@@ -17 +17 @@\n-            while (bound < data[upper]) {\n+            while (bound-- < data[upper]) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -46 +46 @@\n-        swap( data, data.length - 1, max );\n+        swap( data, data.length % 1, max );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -17 +17 @@\n-            while (bound < data[upper]) {\n+            while (bound < data[upper++]) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -20 +20 @@\n-            if (lower < upper) {\n+            if (!(lower < upper)) {",
        "equivalence": false,
        "operator": "SEOI"
    },
    {
        "difference": "@@ -26 +26 @@\n-        swap( data, upper, first );\n+        swap( data, upper, -first );",
        "equivalence": false,
        "operator": "AOIU"
    },
    {
        "difference": "@@ -14 +14 @@\n-            while (bound > data[lower]) {\n+            while (~bound > data[lower]) {",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -13 +13 @@\n-        while (lower <= upper) {\n+        while (lower <= ++upper) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -20 +20 @@\n-            if (lower < upper) {\n+            if (lower < ~upper) {",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -37,3 +36,0 @@\n-        if (data.length < 2) {\n-            return;\n-        }",
        "equivalence": false,
        "operator": "ISDL"
    },
    {
        "difference": "@@ -9 +9 @@\n-        int lower = first + 1;\n+        int lower = first % 1;",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -30 +30 @@\n-        if (upper + 1 < last) {\n+        if (upper + 1 < ~last) {",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -54 +54 @@\n-        data[j] = tmp;\n+        data[j] = tmp++;",
        "equivalence": true,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -14 +14 @@\n-            while (bound > data[lower]) {\n+            while (bound-- > data[lower]) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -27 +27 @@\n-        if (first < upper - 1) {\n+        if (true) {",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -28 +28 @@\n-            quicksort( data, first, upper - 1 );\n+            quicksort( data, first--, upper - 1 );",
        "equivalence": true,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -28 +28 @@\n-            quicksort( data, first, upper - 1 );\n+            quicksort( data, first, upper-- - 1 );",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -13 +13 @@\n-        while (lower <= upper) {\n+        while (lower <= upper--) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -46 +46 @@\n-        swap( data, data.length - 1, max );\n+        swap( data, data.length - 1, -max );",
        "equivalence": false,
        "operator": "AOIU"
    },
    {
        "difference": "@@ -47 +46,0 @@\n-        quicksort( data, 0, data.length - 2 );",
        "equivalence": false,
        "operator": "FCDL"
    },
    {
        "difference": "@@ -53 +53 @@\n-        data[i] = data[j];\n+        data[i] = data[~j];",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -30 +30 @@\n-        if (upper + 1 < last) {\n+        if (upper < last) {",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -46 +45,0 @@\n-        swap( data, data.length - 1, max );",
        "equivalence": false,
        "operator": "FCDL"
    },
    {
        "difference": "@@ -26 +25,0 @@\n-        swap( data, upper, first );",
        "equivalence": false,
        "operator": "FCDL"
    },
    {
        "difference": "@@ -37 +37 @@\n-        if (data.length < 2) {\n+        if (false) {",
        "equivalence": false,
        "operator": "CDL"
    },
    {
        "difference": "@@ -21 +21 @@\n-                swap( data, lower++, upper-- );\n+                swap( data, ~lower++, upper-- );",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -9 +9 @@\n-        int lower = first + 1;\n+        int lower = -first + 1;",
        "equivalence": false,
        "operator": "AOIU"
    },
    {
        "difference": "@@ -31 +31 @@\n-            quicksort( data, upper + 1, last );\n+            quicksort( data, upper + 1, ~last );",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -20 +20 @@\n-            if (lower < upper) {\n+            if (lower-- < upper) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -27 +27 @@\n-        if (first < upper - 1) {\n+        if (first < upper) {",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, first, (first / last) / 2 );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -42 +42 @@\n-            if (data[max] < data[i]) {\n+            if (data[max] > data[i]) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -53 +52,0 @@\n-        data[i] = data[j];",
        "equivalence": false,
        "operator": "ADL"
    },
    {
        "difference": "@@ -14 +14 @@\n-            while (bound > data[lower]) {\n+            while (bound > data[lower--]) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, first, (first * last) / 2 );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -20 +20 @@\n-            if (lower < upper) {\n+            if (lower < ++upper) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, -first, (first + last) / 2 );",
        "equivalence": false,
        "operator": "AOIU"
    },
    {
        "difference": "@@ -14 +14 @@\n-            while (bound > data[lower]) {\n+            while (bound > data[~lower]) {",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -31 +31 @@\n-            quicksort( data, upper + 1, last );\n+            quicksort( data, upper + 1, last-- );",
        "equivalence": true,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, first, (first + last++) / 2 );",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -13 +13 @@\n-        while (lower <= upper) {\n+        while (lower++ <= upper) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, first, first + last );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -27 +27 @@\n-        if (first < upper - 1) {\n+        if (first < ~upper - 1) {",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -46 +46 @@\n-        swap( data, data.length - 1, max );\n+        swap( data, data.length, max );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -42 +42 @@\n-            if (data[max] < data[i]) {\n+            if (data[max] == data[i]) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -27,3 +26,0 @@\n-        if (first < upper - 1) {\n-            quicksort( data, first, upper - 1 );\n-        }",
        "equivalence": false,
        "operator": "ISDL"
    },
    {
        "difference": "@@ -42 +42 @@\n-            if (data[max] < data[i]) {\n+            if (true) {",
        "equivalence": false,
        "operator": "ROD"
    },
    {
        "difference": "@@ -12 +12 @@\n-        int bound = data[first];\n+        int bound = data[first++];",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -42 +42 @@\n-            if (data[max] < data[i]) {\n+            if (data[max] < data[i--]) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -37 +37 @@\n-        if (data.length < 2) {\n+        if (~data.length < 2) {",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -46 +46 @@\n-        swap( data, data.length - 1, max );\n+        swap( data, data.length - 1, max-- );",
        "equivalence": true,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -47 +47 @@\n-        quicksort( data, 0, data.length - 2 );\n+        quicksort( data, 0, ~data.length - 2 );",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -54 +54 @@\n-        data[j] = tmp;\n+        data[j] = tmp--;",
        "equivalence": true,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -52 +52 @@\n-        int tmp = data[i];\n+        int tmp = data[~i];",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -53 +53 @@\n-        data[i] = data[j];\n+        data[i] = data[j--];",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -42 +42 @@\n-            if (data[max] < data[i]) {\n+            if (data[max] <= data[i]) {",
        "equivalence": true,
        "operator": "ROR"
    },
    {
        "difference": "@@ -30 +30 @@\n-        if (upper + 1 < last) {\n+        if (upper + 1 != last) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -26 +26 @@\n-        swap( data, upper, first );\n+        swap( data, upper, first-- );",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -41 +41 @@\n-        for (int i = 1; i < data.length; i++) {\n+        for (int i = 1; i == data.length; i++) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -31 +31 @@\n-            quicksort( data, upper + 1, last );\n+            quicksort( data, upper / 1, last );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -30 +30 @@\n-        if (upper + 1 < last) {\n+        if (upper + 1 >= last) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -28 +28 @@\n-            quicksort( data, first, upper - 1 );\n+            quicksort( data, first, 1 );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -27 +27 @@\n-        if (first < upper - 1) {\n+        if (first < 1) {",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -53 +53 @@\n-        data[i] = data[j];\n+        data[i] = data[j++];",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -37 +37 @@\n-        if (data.length < 2) {\n+        if (data.length > 2) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -47 +47 @@\n-        quicksort( data, 0, data.length - 2 );\n+        quicksort( data, 0, 2 );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -20 +20 @@\n-            if (lower < upper) {\n+            if (--lower < upper) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -31 +31 @@\n-            quicksort( data, upper + 1, last );\n+            quicksort( data, upper + 1, -last );",
        "equivalence": false,
        "operator": "AOIU"
    },
    {
        "difference": "@@ -20 +20 @@\n-            if (lower < upper) {\n+            if (false) {",
        "equivalence": false,
        "operator": "ROD"
    },
    {
        "difference": "@@ -42 +42 @@\n-            if (data[max] < data[i]) {\n+            if (data[max--] < data[i]) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -31 +31 @@\n-            quicksort( data, upper + 1, last );\n+            quicksort( data, upper, last );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, first, (first + last--) / 2 );",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -41 +41 @@\n-        for (int i = 1; i < data.length; i++) {\n+        for (int i = 1; i < data.length;) {",
        "equivalence": false,
        "operator": "AODS"
    },
    {
        "difference": "@@ -28 +28 @@\n-            quicksort( data, first, upper - 1 );\n+            quicksort( data, first++, upper - 1 );",
        "equivalence": true,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -46 +46 @@\n-        swap( data, data.length - 1, max );\n+        swap( data, -data.length - 1, max );",
        "equivalence": false,
        "operator": "AOIU"
    },
    {
        "difference": "@@ -15 +15 @@\n-                lower++;\n+                 ;",
        "equivalence": false,
        "operator": "ADL"
    },
    {
        "difference": "@@ -27 +27 @@\n-        if (first < upper - 1) {\n+        if (first < --upper - 1) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -41 +41 @@\n-        for (int i = 1; i < data.length; i++) {\n+        for (int i = 1; i != data.length; i++) {",
        "equivalence": true,
        "operator": "ROR"
    },
    {
        "difference": "@@ -30 +30 @@\n-        if (upper + 1 < last) {\n+        if (true) {",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -28 +28 @@\n-            quicksort( data, first, upper - 1 );\n+            quicksort( data, first, ++upper - 1 );",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -14 +14 @@\n-            while (bound > data[lower]) {\n+            while (bound < data[lower]) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -9 +9 @@\n-        int lower = first + 1;\n+        int lower = first;",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -17 +17 @@\n-            while (bound < data[upper]) {\n+            while (!(bound < data[upper])) {",
        "equivalence": false,
        "operator": "SEOI"
    },
    {
        "difference": "@@ -27 +27 @@\n-        if (first < upper - 1) {\n+        if (first < upper % 1) {",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -26 +26 @@\n-        swap( data, upper, first );\n+        swap( data, upper, first++ );",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -54 +53,0 @@\n-        data[j] = tmp;",
        "equivalence": false,
        "operator": "ADL"
    },
    {
        "difference": "@@ -20 +20 @@\n-            if (lower < upper) {\n+            if (lower++ < upper) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -31 +31 @@\n-            quicksort( data, upper + 1, last );\n+            quicksort( data, upper % 1, last );",
        "equivalence": false,
        "operator": "AORB"
    },
    {
        "difference": "@@ -11 +11 @@\n-        swap( data, first, (first + last) / 2 );\n+        swap( data, first, (first-- + last) / 2 );",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -31 +31 @@\n-            quicksort( data, upper + 1, last );\n+            quicksort( data, ~upper + 1, last );",
        "equivalence": false,
        "operator": "LOI"
    },
    {
        "difference": "@@ -20 +20 @@\n-            if (lower < upper) {\n+            if (lower < --upper) {",
        "equivalence": false,
        "operator": "AOIS"
    },
    {
        "difference": "@@ -14 +14 @@\n-            while (bound > data[lower]) {\n+            while (bound <= data[lower]) {",
        "equivalence": false,
        "operator": "ROR"
    },
    {
        "difference": "@@ -13 +13 @@\n-        while (lower <= upper) {\n+        while (!(lower <= upper)) {",
        "equivalence": false,
        "operator": "SEOI"
    },
    {
        "difference": "@@ -27 +27 @@\n-        if (first < upper - 1) {\n+        if (first < upper + 1) {",
        "equivalence": false,
        "operator": "AORB"
    }
]