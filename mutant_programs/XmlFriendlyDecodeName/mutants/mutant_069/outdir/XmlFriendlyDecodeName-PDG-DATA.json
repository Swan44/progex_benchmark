{
  "directed": true,
  "multigraph": true,
  "label": "DDG of XmlFriendlyDecodeName.java",
  "type": "Data Dependence Graph (DDG)",
  "file": "XmlFriendlyDecodeName.java",

  "nodes": [
    {
      "id": 0,
      "line": 2,
      "label": "String decodeName(String name)",
      "defs": ["name"],
      "uses": []
    },
    {
      "id": 1,
      "line": 3,
      "label": "final WeakReference ref = (WeakReference)unescapeCache.get(name)",
      "defs": ["ref"],
      "uses": ["name"]
    },
    {
      "id": 2,
      "line": 4,
      "label": "String s = (String)(ref == null ? null : ref.get())",
      "defs": ["s"],
      "uses": ["ref"]
    },
    {
      "id": 3,
      "line": 6,
      "label": "if (s == null)",
      "defs": [],
      "uses": ["s"]
    },
    {
      "id": 4,
      "line": 7,
      "label": "final char dollarReplacementFirstChar = dollarReplacement.charAt(0)",
      "defs": ["dollarReplacementFirstChar"],
      "uses": []
    },
    {
      "id": 5,
      "line": 8,
      "label": "final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0)",
      "defs": ["escapeReplacementFirstChar"],
      "uses": []
    },
    {
      "id": 6,
      "line": 9,
      "label": "final int length = name.length()",
      "defs": ["length"],
      "uses": ["name"]
    },
    {
      "id": 7,
      "line": 12,
      "label": "int i = 0",
      "defs": ["i"],
      "uses": []
    },
    {
      "id": 8,
      "line": 14,
      "label": "for (i < length)",
      "defs": [],
      "uses": ["length", "i"]
    },
    {
      "id": 9,
      "line": 14,
      "label": "i++",
      "defs": ["i"],
      "uses": ["i"]
    },
    {
      "id": 10,
      "line": 0,
      "label": "endfor"
    },
    {
      "id": 11,
      "line": 15,
      "label": "char c = name.charAt(i)",
      "defs": ["c"],
      "uses": ["name", "i"]
    },
    {
      "id": 12,
      "line": 17,
      "label": "if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar)",
      "defs": [],
      "uses": ["c", "dollarReplacementFirstChar", "escapeReplacementFirstChar"]
    },
    {
      "id": 13,
      "line": 19,
      "label": "break;"
    },
    {
      "id": 14,
      "line": 0,
      "label": "endif"
    },
    {
      "id": 15,
      "line": 23,
      "label": "if (i == length)",
      "defs": [],
      "uses": ["length", "i"]
    },
    {
      "id": 16,
      "line": 24,
      "label": "return name;",
      "defs": [],
      "uses": ["name"]
    },
    {
      "id": 17,
      "line": 0,
      "label": "endif"
    },
    {
      "id": 18,
      "line": 28,
      "label": "final StringBuffer result = new StringBuffer(length + 8)",
      "defs": ["result"],
      "uses": ["length"]
    },
    {
      "id": 19,
      "line": 31,
      "label": "if (i > 0)",
      "defs": [],
      "uses": ["i"]
    },
    {
      "id": 20,
      "line": 32,
      "label": "result.append(name.substring(0, i))",
      "defs": ["result"],
      "uses": ["result", "name", "i"]
    },
    {
      "id": 21,
      "line": 0,
      "label": "endif"
    },
    {
      "id": 22,
      "line": 35,
      "label": "for (i < length)",
      "defs": [],
      "uses": ["length", "i"]
    },
    {
      "id": 23,
      "line": 35,
      "label": "i++",
      "defs": ["i"],
      "uses": ["i"]
    },
    {
      "id": 24,
      "line": 0,
      "label": "endfor"
    },
    {
      "id": 25,
      "line": 36,
      "label": "char c = name.charAt(i)",
      "defs": ["c"],
      "uses": ["name", "i"]
    },
    {
      "id": 26,
      "line": 37,
      "label": "if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i))",
      "defs": [],
      "uses": ["c", "dollarReplacementFirstChar", "name", "i"]
    },
    {
      "id": 27,
      "line": 38,
      "label": "i += dollarReplacement.length() - 1",
      "defs": ["i"],
      "uses": ["i"]
    },
    {
      "id": 28,
      "line": 39,
      "label": "result.append('$')",
      "defs": ["result"],
      "uses": ["result"]
    },
    {
      "id": 29,
      "line": 0,
      "label": "endif"
    },
    {
      "id": 30,
      "line": 40,
      "label": "if (c == escapeReplacementFirstChar  && name.startsWith(escapeCharReplacement, i))",
      "defs": [],
      "uses": ["c", "name", "i", "escapeReplacementFirstChar"]
    },
    {
      "id": 31,
      "line": 43,
      "label": "result.append('_')",
      "defs": ["result"],
      "uses": ["result"]
    },
    {
      "id": 32,
      "line": 0,
      "label": "endif"
    },
    {
      "id": 33,
      "line": 45,
      "label": "result.append(c)",
      "defs": ["result"],
      "uses": ["result", "c"]
    },
    {
      "id": 34,
      "line": 49,
      "label": "s = result.toString()",
      "defs": ["s"],
      "uses": ["result"]
    },
    {
      "id": 35,
      "line": 50,
      "label": "unescapeCache.put(name, new WeakReference(s))",
      "defs": [],
      "uses": ["s", "name"]
    },
    {
      "id": 36,
      "line": 0,
      "label": "endif"
    },
    {
      "id": 37,
      "line": 52,
      "label": "return s;",
      "defs": [],
      "uses": ["s"]
    }
  ],

  "edges": [
    {
      "id": 0,
      "source": 0,
      "target": 1,
      "type": "Control",
      "label": ""
    },
    {
      "id": 1,
      "source": 1,
      "target": 2,
      "type": "Control",
      "label": ""
    },
    {
      "id": 2,
      "source": 2,
      "target": 3,
      "type": "Control",
      "label": ""
    },
    {
      "id": 3,
      "source": 3,
      "target": 4,
      "type": "Control",
      "label": "True"
    },
    {
      "id": 4,
      "source": 4,
      "target": 5,
      "type": "Control",
      "label": ""
    },
    {
      "id": 5,
      "source": 5,
      "target": 6,
      "type": "Control",
      "label": ""
    },
    {
      "id": 6,
      "source": 6,
      "target": 7,
      "type": "Control",
      "label": ""
    },
    {
      "id": 7,
      "source": 7,
      "target": 8,
      "type": "Control",
      "label": ""
    },
    {
      "id": 8,
      "source": 8,
      "target": 10,
      "type": "Control",
      "label": "False"
    },
    {
      "id": 9,
      "source": 8,
      "target": 11,
      "type": "Control",
      "label": "True"
    },
    {
      "id": 10,
      "source": 11,
      "target": 12,
      "type": "Control",
      "label": ""
    },
    {
      "id": 11,
      "source": 12,
      "target": 13,
      "type": "Control",
      "label": "True"
    },
    {
      "id": 12,
      "source": 13,
      "target": 10,
      "type": "Control",
      "label": ""
    },
    {
      "id": 13,
      "source": 12,
      "target": 14,
      "type": "Control",
      "label": "False"
    },
    {
      "id": 14,
      "source": 14,
      "target": 9,
      "type": "Control",
      "label": ""
    },
    {
      "id": 15,
      "source": 9,
      "target": 8,
      "type": "Control",
      "label": ""
    },
    {
      "id": 16,
      "source": 10,
      "target": 15,
      "type": "Control",
      "label": ""
    },
    {
      "id": 17,
      "source": 15,
      "target": 16,
      "type": "Control",
      "label": "True"
    },
    {
      "id": 18,
      "source": 15,
      "target": 17,
      "type": "Control",
      "label": "False"
    },
    {
      "id": 19,
      "source": 17,
      "target": 18,
      "type": "Control",
      "label": ""
    },
    {
      "id": 20,
      "source": 18,
      "target": 19,
      "type": "Control",
      "label": ""
    },
    {
      "id": 21,
      "source": 19,
      "target": 20,
      "type": "Control",
      "label": "True"
    },
    {
      "id": 22,
      "source": 20,
      "target": 21,
      "type": "Control",
      "label": ""
    },
    {
      "id": 23,
      "source": 19,
      "target": 21,
      "type": "Control",
      "label": "False"
    },
    {
      "id": 24,
      "source": 21,
      "target": 22,
      "type": "Control",
      "label": ""
    },
    {
      "id": 25,
      "source": 22,
      "target": 24,
      "type": "Control",
      "label": "False"
    },
    {
      "id": 26,
      "source": 22,
      "target": 25,
      "type": "Control",
      "label": "True"
    },
    {
      "id": 27,
      "source": 25,
      "target": 26,
      "type": "Control",
      "label": ""
    },
    {
      "id": 28,
      "source": 26,
      "target": 27,
      "type": "Control",
      "label": "True"
    },
    {
      "id": 29,
      "source": 27,
      "target": 28,
      "type": "Control",
      "label": ""
    },
    {
      "id": 30,
      "source": 28,
      "target": 29,
      "type": "Control",
      "label": ""
    },
    {
      "id": 31,
      "source": 26,
      "target": 30,
      "type": "Control",
      "label": "False"
    },
    {
      "id": 32,
      "source": 30,
      "target": 31,
      "type": "Control",
      "label": "True"
    },
    {
      "id": 33,
      "source": 31,
      "target": 32,
      "type": "Control",
      "label": ""
    },
    {
      "id": 34,
      "source": 30,
      "target": 33,
      "type": "Control",
      "label": "False"
    },
    {
      "id": 35,
      "source": 33,
      "target": 32,
      "type": "Control",
      "label": ""
    },
    {
      "id": 36,
      "source": 32,
      "target": 29,
      "type": "Control",
      "label": ""
    },
    {
      "id": 37,
      "source": 29,
      "target": 23,
      "type": "Control",
      "label": ""
    },
    {
      "id": 38,
      "source": 23,
      "target": 22,
      "type": "Control",
      "label": ""
    },
    {
      "id": 39,
      "source": 24,
      "target": 34,
      "type": "Control",
      "label": ""
    },
    {
      "id": 40,
      "source": 34,
      "target": 35,
      "type": "Control",
      "label": ""
    },
    {
      "id": 41,
      "source": 35,
      "target": 36,
      "type": "Control",
      "label": ""
    },
    {
      "id": 42,
      "source": 3,
      "target": 36,
      "type": "Control",
      "label": "False"
    },
    {
      "id": 43,
      "source": 36,
      "target": 37,
      "type": "Control",
      "label": ""
    },
    {
      "id": 44,
      "source": 0,
      "target": 1,
      "type": "Flows",
      "label": "name"
    },
    {
      "id": 45,
      "source": 0,
      "target": 6,
      "type": "Flows",
      "label": "name"
    },
    {
      "id": 46,
      "source": 0,
      "target": 11,
      "type": "Flows",
      "label": "name"
    },
    {
      "id": 47,
      "source": 0,
      "target": 25,
      "type": "Flows",
      "label": "name"
    },
    {
      "id": 48,
      "source": 0,
      "target": 26,
      "type": "Flows",
      "label": "name"
    },
    {
      "id": 49,
      "source": 0,
      "target": 30,
      "type": "Flows",
      "label": "name"
    },
    {
      "id": 50,
      "source": 0,
      "target": 35,
      "type": "Flows",
      "label": "name"
    },
    {
      "id": 51,
      "source": 0,
      "target": 20,
      "type": "Flows",
      "label": "name"
    },
    {
      "id": 52,
      "source": 0,
      "target": 16,
      "type": "Flows",
      "label": "name"
    },
    {
      "id": 53,
      "source": 1,
      "target": 2,
      "type": "Flows",
      "label": "ref"
    },
    {
      "id": 54,
      "source": 2,
      "target": 3,
      "type": "Flows",
      "label": "s"
    },
    {
      "id": 55,
      "source": 2,
      "target": 37,
      "type": "Flows",
      "label": "s"
    },
    {
      "id": 56,
      "source": 4,
      "target": 12,
      "type": "Flows",
      "label": "dollarReplacementFirstChar"
    },
    {
      "id": 57,
      "source": 4,
      "target": 26,
      "type": "Flows",
      "label": "dollarReplacementFirstChar"
    },
    {
      "id": 58,
      "source": 5,
      "target": 12,
      "type": "Flows",
      "label": "escapeReplacementFirstChar"
    },
    {
      "id": 59,
      "source": 5,
      "target": 30,
      "type": "Flows",
      "label": "escapeReplacementFirstChar"
    },
    {
      "id": 60,
      "source": 6,
      "target": 8,
      "type": "Flows",
      "label": "length"
    },
    {
      "id": 61,
      "source": 6,
      "target": 15,
      "type": "Flows",
      "label": "length"
    },
    {
      "id": 62,
      "source": 6,
      "target": 18,
      "type": "Flows",
      "label": "length"
    },
    {
      "id": 63,
      "source": 6,
      "target": 22,
      "type": "Flows",
      "label": "length"
    },
    {
      "id": 64,
      "source": 7,
      "target": 8,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 65,
      "source": 7,
      "target": 11,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 66,
      "source": 7,
      "target": 9,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 67,
      "source": 7,
      "target": 15,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 68,
      "source": 7,
      "target": 19,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 69,
      "source": 7,
      "target": 22,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 70,
      "source": 7,
      "target": 25,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 71,
      "source": 7,
      "target": 26,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 72,
      "source": 7,
      "target": 30,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 73,
      "source": 7,
      "target": 23,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 74,
      "source": 7,
      "target": 27,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 75,
      "source": 7,
      "target": 20,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 76,
      "source": 11,
      "target": 12,
      "type": "Flows",
      "label": "c"
    },
    {
      "id": 77,
      "source": 9,
      "target": 8,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 78,
      "source": 9,
      "target": 11,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 79,
      "source": 9,
      "target": 15,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 80,
      "source": 9,
      "target": 19,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 81,
      "source": 9,
      "target": 22,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 82,
      "source": 9,
      "target": 25,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 83,
      "source": 9,
      "target": 26,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 84,
      "source": 9,
      "target": 30,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 85,
      "source": 9,
      "target": 23,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 86,
      "source": 9,
      "target": 27,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 87,
      "source": 9,
      "target": 20,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 88,
      "source": 18,
      "target": 33,
      "type": "Flows",
      "label": "result"
    },
    {
      "id": 89,
      "source": 18,
      "target": 31,
      "type": "Flows",
      "label": "result"
    },
    {
      "id": 90,
      "source": 18,
      "target": 28,
      "type": "Flows",
      "label": "result"
    },
    {
      "id": 91,
      "source": 18,
      "target": 34,
      "type": "Flows",
      "label": "result"
    },
    {
      "id": 92,
      "source": 18,
      "target": 20,
      "type": "Flows",
      "label": "result"
    },
    {
      "id": 93,
      "source": 25,
      "target": 26,
      "type": "Flows",
      "label": "c"
    },
    {
      "id": 94,
      "source": 25,
      "target": 30,
      "type": "Flows",
      "label": "c"
    },
    {
      "id": 95,
      "source": 25,
      "target": 33,
      "type": "Flows",
      "label": "c"
    },
    {
      "id": 96,
      "source": 33,
      "target": 31,
      "type": "Flows",
      "label": "result"
    },
    {
      "id": 97,
      "source": 33,
      "target": 28,
      "type": "Flows",
      "label": "result"
    },
    {
      "id": 98,
      "source": 33,
      "target": 34,
      "type": "Flows",
      "label": "result"
    },
    {
      "id": 99,
      "source": 23,
      "target": 22,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 100,
      "source": 23,
      "target": 25,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 101,
      "source": 23,
      "target": 26,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 102,
      "source": 23,
      "target": 30,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 103,
      "source": 23,
      "target": 27,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 104,
      "source": 31,
      "target": 33,
      "type": "Flows",
      "label": "result"
    },
    {
      "id": 105,
      "source": 31,
      "target": 28,
      "type": "Flows",
      "label": "result"
    },
    {
      "id": 106,
      "source": 31,
      "target": 34,
      "type": "Flows",
      "label": "result"
    },
    {
      "id": 107,
      "source": 27,
      "target": 23,
      "type": "Flows",
      "label": "i"
    },
    {
      "id": 108,
      "source": 28,
      "target": 33,
      "type": "Flows",
      "label": "result"
    },
    {
      "id": 109,
      "source": 28,
      "target": 31,
      "type": "Flows",
      "label": "result"
    },
    {
      "id": 110,
      "source": 28,
      "target": 34,
      "type": "Flows",
      "label": "result"
    },
    {
      "id": 111,
      "source": 34,
      "target": 35,
      "type": "Flows",
      "label": "s"
    },
    {
      "id": 112,
      "source": 34,
      "target": 37,
      "type": "Flows",
      "label": "s"
    },
    {
      "id": 113,
      "source": 20,
      "target": 33,
      "type": "Flows",
      "label": "result"
    },
    {
      "id": 114,
      "source": 20,
      "target": 31,
      "type": "Flows",
      "label": "result"
    },
    {
      "id": 115,
      "source": 20,
      "target": 28,
      "type": "Flows",
      "label": "result"
    },
    {
      "id": 116,
      "source": 20,
      "target": 34,
      "type": "Flows",
      "label": "result"
    }
  ]
}
