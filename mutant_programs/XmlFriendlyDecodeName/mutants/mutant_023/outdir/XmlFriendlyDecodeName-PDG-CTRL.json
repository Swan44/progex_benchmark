{
  "directed": true,
  "label": "CDG of XmlFriendlyDecodeName.java",
  "type": "Control Dependence Graph (CDG)",
  "file": "XmlFriendlyDecodeName.java",

  "nodes": [
    {
      "id": 0,
      "line": 2,
      "label": "String decodeName(String name)"
    },
    {
      "id": 1,
      "line": 3,
      "label": "final WeakReference ref = (WeakReference)unescapeCache.get(name)"
    },
    {
      "id": 2,
      "line": 4,
      "label": "String s = (String)(ref == null ? null : ref.get())"
    },
    {
      "id": 3,
      "line": 6,
      "label": "if (s == null)"
    },
    {
      "id": 4,
      "line": 0,
      "label": "THEN"
    },
    {
      "id": 5,
      "line": 7,
      "label": "final char dollarReplacementFirstChar = dollarReplacement.charAt(0)"
    },
    {
      "id": 6,
      "line": 8,
      "label": "final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0)"
    },
    {
      "id": 7,
      "line": 9,
      "label": "final int length = name.length()"
    },
    {
      "id": 8,
      "line": 12,
      "label": "int i = 0"
    },
    {
      "id": 9,
      "line": 14,
      "label": "for (i < length)"
    },
    {
      "id": 10,
      "line": 0,
      "label": "LOOP"
    },
    {
      "id": 11,
      "line": 15,
      "label": "char c = name.charAt(i)"
    },
    {
      "id": 12,
      "line": 17,
      "label": "if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar)"
    },
    {
      "id": 13,
      "line": 0,
      "label": "THEN"
    },
    {
      "id": 14,
      "line": 19,
      "label": "break;"
    },
    {
      "id": 15,
      "line": 0,
      "label": "ELSE"
    },
    {
      "id": 16,
      "line": 14,
      "label": "i++"
    },
    {
      "id": 17,
      "line": 0,
      "label": "FOLLOW-1"
    },
    {
      "id": 18,
      "line": 23,
      "label": "if (i == length)"
    },
    {
      "id": 19,
      "line": 0,
      "label": "THEN"
    },
    {
      "id": 20,
      "line": 24,
      "label": "return name;"
    },
    {
      "id": 21,
      "line": 0,
      "label": "ELSE"
    },
    {
      "id": 22,
      "line": 0,
      "label": "FOLLOW-2"
    },
    {
      "id": 23,
      "line": 28,
      "label": "final StringBuffer result = new StringBuffer(length + 8)"
    },
    {
      "id": 24,
      "line": 31,
      "label": "if (i > -1)"
    },
    {
      "id": 25,
      "line": 0,
      "label": "THEN"
    },
    {
      "id": 26,
      "line": 32,
      "label": "result.append(name.substring(0, i))"
    },
    {
      "id": 27,
      "line": 35,
      "label": "for (i < length)"
    },
    {
      "id": 28,
      "line": 0,
      "label": "LOOP"
    },
    {
      "id": 29,
      "line": 36,
      "label": "char c = name.charAt(i)"
    },
    {
      "id": 30,
      "line": 37,
      "label": "if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i))"
    },
    {
      "id": 31,
      "line": 0,
      "label": "THEN"
    },
    {
      "id": 32,
      "line": 38,
      "label": "i += dollarReplacement.length() - 1"
    },
    {
      "id": 33,
      "line": 39,
      "label": "result.append('$')"
    },
    {
      "id": 34,
      "line": 0,
      "label": "ELSE"
    },
    {
      "id": 35,
      "line": 40,
      "label": "if (c == escapeReplacementFirstChar  && name.startsWith(escapeCharReplacement, i))"
    },
    {
      "id": 36,
      "line": 0,
      "label": "THEN"
    },
    {
      "id": 37,
      "line": 42,
      "label": "i += escapeCharReplacement.length() - 1"
    },
    {
      "id": 38,
      "line": 43,
      "label": "result.append('_')"
    },
    {
      "id": 39,
      "line": 0,
      "label": "ELSE"
    },
    {
      "id": 40,
      "line": 45,
      "label": "result.append(c)"
    },
    {
      "id": 41,
      "line": 35,
      "label": "i++"
    },
    {
      "id": 42,
      "line": 49,
      "label": "s = result.toString()"
    },
    {
      "id": 43,
      "line": 50,
      "label": "unescapeCache.put(name, new WeakReference(s))"
    },
    {
      "id": 44,
      "line": 52,
      "label": "return s;"
    },
    {
      "id": 45,
      "line": 0,
      "label": "exit"
    }
  ],

  "edges": [
    {
      "id": 0,
      "source": 0,
      "target": 1,
      "label": ""
    },
    {
      "id": 1,
      "source": 0,
      "target": 2,
      "label": ""
    },
    {
      "id": 2,
      "source": 0,
      "target": 3,
      "label": ""
    },
    {
      "id": 3,
      "source": 3,
      "target": 4,
      "label": "True"
    },
    {
      "id": 4,
      "source": 4,
      "target": 5,
      "label": ""
    },
    {
      "id": 5,
      "source": 4,
      "target": 6,
      "label": ""
    },
    {
      "id": 6,
      "source": 4,
      "target": 7,
      "label": ""
    },
    {
      "id": 7,
      "source": 4,
      "target": 8,
      "label": ""
    },
    {
      "id": 8,
      "source": 4,
      "target": 9,
      "label": ""
    },
    {
      "id": 9,
      "source": 9,
      "target": 10,
      "label": "True"
    },
    {
      "id": 10,
      "source": 10,
      "target": 11,
      "label": ""
    },
    {
      "id": 11,
      "source": 10,
      "target": 12,
      "label": ""
    },
    {
      "id": 12,
      "source": 12,
      "target": 13,
      "label": "True"
    },
    {
      "id": 13,
      "source": 13,
      "target": 14,
      "label": ""
    },
    {
      "id": 14,
      "source": 12,
      "target": 15,
      "label": "False"
    },
    {
      "id": 15,
      "source": 10,
      "target": 16,
      "label": ""
    },
    {
      "id": 16,
      "source": 15,
      "target": 17,
      "label": ""
    },
    {
      "id": 17,
      "source": 17,
      "target": 18,
      "label": ""
    },
    {
      "id": 18,
      "source": 18,
      "target": 19,
      "label": "True"
    },
    {
      "id": 19,
      "source": 19,
      "target": 20,
      "label": ""
    },
    {
      "id": 20,
      "source": 18,
      "target": 21,
      "label": "False"
    },
    {
      "id": 21,
      "source": 21,
      "target": 22,
      "label": ""
    },
    {
      "id": 22,
      "source": 22,
      "target": 23,
      "label": ""
    },
    {
      "id": 23,
      "source": 22,
      "target": 24,
      "label": ""
    },
    {
      "id": 24,
      "source": 24,
      "target": 25,
      "label": "True"
    },
    {
      "id": 25,
      "source": 25,
      "target": 26,
      "label": ""
    },
    {
      "id": 26,
      "source": 22,
      "target": 27,
      "label": ""
    },
    {
      "id": 27,
      "source": 27,
      "target": 28,
      "label": "True"
    },
    {
      "id": 28,
      "source": 28,
      "target": 29,
      "label": ""
    },
    {
      "id": 29,
      "source": 28,
      "target": 30,
      "label": ""
    },
    {
      "id": 30,
      "source": 30,
      "target": 31,
      "label": "True"
    },
    {
      "id": 31,
      "source": 31,
      "target": 32,
      "label": ""
    },
    {
      "id": 32,
      "source": 31,
      "target": 33,
      "label": ""
    },
    {
      "id": 33,
      "source": 30,
      "target": 34,
      "label": "False"
    },
    {
      "id": 34,
      "source": 34,
      "target": 35,
      "label": ""
    },
    {
      "id": 35,
      "source": 35,
      "target": 36,
      "label": "True"
    },
    {
      "id": 36,
      "source": 36,
      "target": 37,
      "label": ""
    },
    {
      "id": 37,
      "source": 36,
      "target": 38,
      "label": ""
    },
    {
      "id": 38,
      "source": 35,
      "target": 39,
      "label": "False"
    },
    {
      "id": 39,
      "source": 39,
      "target": 40,
      "label": ""
    },
    {
      "id": 40,
      "source": 28,
      "target": 41,
      "label": ""
    },
    {
      "id": 41,
      "source": 22,
      "target": 42,
      "label": ""
    },
    {
      "id": 42,
      "source": 22,
      "target": 43,
      "label": ""
    },
    {
      "id": 43,
      "source": 22,
      "target": 44,
      "label": ""
    },
    {
      "id": 44,
      "source": 0,
      "target": 45,
      "label": ""
    }
  ]
}
