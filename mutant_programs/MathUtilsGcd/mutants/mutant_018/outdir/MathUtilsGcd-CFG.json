{
  "directed": true,
  "multigraph": true,
  "label": "CFG of MathUtilsGcd.java",
  "type": "Control Flow Graph (CFG)",
  "file": "MathUtilsGcd.java",
  "package": "",

  "nodes": [
    {
      "id": 0,
      "line": 2,
      "label": "int gcd(int u, int v)"
    },
    {
      "id": 1,
      "line": 3,
      "label": "if (u * v == 0)"
    },
    {
      "id": 2,
      "line": 4,
      "label": "return (Math.abs(u) + Math.abs(v));"
    },
    {
      "id": 3,
      "line": 0,
      "label": "endif"
    },
    {
      "id": 4,
      "line": 11,
      "label": "if (u > 0)"
    },
    {
      "id": 5,
      "line": 12,
      "label": "u = -u"
    },
    {
      "id": 6,
      "line": 0,
      "label": "endif"
    },
    {
      "id": 7,
      "line": 14,
      "label": "if (v > 0)"
    },
    {
      "id": 8,
      "line": 15,
      "label": "v = -v"
    },
    {
      "id": 9,
      "line": 0,
      "label": "endif"
    },
    {
      "id": 10,
      "line": 18,
      "label": "int k = 0"
    },
    {
      "id": 11,
      "line": 19,
      "label": "while ((u & 1) == 0 && (v & 1) == 0 && k < 31)"
    },
    {
      "id": 12,
      "line": 0,
      "label": "endwhile"
    },
    {
      "id": 13,
      "line": 22,
      "label": "v /= 2"
    },
    {
      "id": 14,
      "line": 23,
      "label": "k++"
    },
    {
      "id": 15,
      "line": 25,
      "label": "if (k == 31)"
    },
    {
      "id": 16,
      "line": 26,
      "label": "throw new ArithmeticException('overflow: gcd is 2^31')"
    },
    {
      "id": 17,
      "line": 0,
      "label": "endif"
    },
    {
      "id": 18,
      "line": 30,
      "label": "int t = ((u & 1) == 1) ? v : -(u / 2)"
    },
    {
      "id": 19,
      "line": 33,
      "label": "do"
    },
    {
      "id": 20,
      "line": 49,
      "label": "while (t != 0)"
    },
    {
      "id": 21,
      "line": 0,
      "label": "end-do-while"
    },
    {
      "id": 22,
      "line": 36,
      "label": "while ((t & 1) == 0)"
    },
    {
      "id": 23,
      "line": 0,
      "label": "endwhile"
    },
    {
      "id": 24,
      "line": 37,
      "label": "t /= 2"
    },
    {
      "id": 25,
      "line": 40,
      "label": "if (t > 0)"
    },
    {
      "id": 26,
      "line": 41,
      "label": "u = -t"
    },
    {
      "id": 27,
      "line": 0,
      "label": "endif"
    },
    {
      "id": 28,
      "line": 43,
      "label": "v = t"
    },
    {
      "id": 29,
      "line": 46,
      "label": "t = (v - u) / 2"
    },
    {
      "id": 30,
      "line": 50,
      "label": "return -u * (1 << k);"
    }
  ],

  "edges": [
    {
      "id": 0,
      "source": 0,
      "target": 1,
      "label": ""
    },
    {
      "id": 1,
      "source": 1,
      "target": 2,
      "label": "True"
    },
    {
      "id": 2,
      "source": 1,
      "target": 3,
      "label": "False"
    },
    {
      "id": 3,
      "source": 3,
      "target": 4,
      "label": ""
    },
    {
      "id": 4,
      "source": 4,
      "target": 5,
      "label": "True"
    },
    {
      "id": 5,
      "source": 5,
      "target": 6,
      "label": ""
    },
    {
      "id": 6,
      "source": 4,
      "target": 6,
      "label": "False"
    },
    {
      "id": 7,
      "source": 6,
      "target": 7,
      "label": ""
    },
    {
      "id": 8,
      "source": 7,
      "target": 8,
      "label": "True"
    },
    {
      "id": 9,
      "source": 8,
      "target": 9,
      "label": ""
    },
    {
      "id": 10,
      "source": 7,
      "target": 9,
      "label": "False"
    },
    {
      "id": 11,
      "source": 9,
      "target": 10,
      "label": ""
    },
    {
      "id": 12,
      "source": 10,
      "target": 11,
      "label": ""
    },
    {
      "id": 13,
      "source": 11,
      "target": 12,
      "label": "False"
    },
    {
      "id": 14,
      "source": 11,
      "target": 13,
      "label": "True"
    },
    {
      "id": 15,
      "source": 13,
      "target": 14,
      "label": ""
    },
    {
      "id": 16,
      "source": 14,
      "target": 11,
      "label": ""
    },
    {
      "id": 17,
      "source": 12,
      "target": 15,
      "label": ""
    },
    {
      "id": 18,
      "source": 15,
      "target": 16,
      "label": "True"
    },
    {
      "id": 19,
      "source": 15,
      "target": 17,
      "label": "False"
    },
    {
      "id": 20,
      "source": 17,
      "target": 18,
      "label": ""
    },
    {
      "id": 21,
      "source": 18,
      "target": 19,
      "label": ""
    },
    {
      "id": 22,
      "source": 19,
      "target": 22,
      "label": ""
    },
    {
      "id": 23,
      "source": 22,
      "target": 23,
      "label": "False"
    },
    {
      "id": 24,
      "source": 22,
      "target": 24,
      "label": "True"
    },
    {
      "id": 25,
      "source": 24,
      "target": 22,
      "label": ""
    },
    {
      "id": 26,
      "source": 23,
      "target": 25,
      "label": ""
    },
    {
      "id": 27,
      "source": 25,
      "target": 26,
      "label": "True"
    },
    {
      "id": 28,
      "source": 26,
      "target": 27,
      "label": ""
    },
    {
      "id": 29,
      "source": 25,
      "target": 28,
      "label": "False"
    },
    {
      "id": 30,
      "source": 28,
      "target": 27,
      "label": ""
    },
    {
      "id": 31,
      "source": 27,
      "target": 29,
      "label": ""
    },
    {
      "id": 32,
      "source": 29,
      "target": 20,
      "label": ""
    },
    {
      "id": 33,
      "source": 20,
      "target": 19,
      "label": "True"
    },
    {
      "id": 34,
      "source": 20,
      "target": 21,
      "label": "False"
    },
    {
      "id": 35,
      "source": 21,
      "target": 30,
      "label": ""
    }
  ]
}
