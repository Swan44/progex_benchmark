{
  "directed": true,
  "label": "CDG of StringTokenizerSkip.java",
  "type": "Control Dependence Graph (CDG)",
  "file": "StringTokenizerSkip.java",

  "nodes": [
    {
      "id": 0,
      "line": 2,
      "label": "int skipDelimiters( int startPos )"
    },
    {
      "id": 1,
      "line": 4,
      "label": "int position = startPos"
    },
    {
      "id": 2,
      "line": 5,
      "label": "while (!retDelims && position < maxPosition)"
    },
    {
      "id": 3,
      "line": 0,
      "label": "LOOP"
    },
    {
      "id": 4,
      "line": 6,
      "label": "if (!hasSurrogates)"
    },
    {
      "id": 5,
      "line": 0,
      "label": "THEN"
    },
    {
      "id": 6,
      "line": 7,
      "label": "char c = str.charAt( position )"
    },
    {
      "id": 7,
      "line": 8,
      "label": "if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0)"
    },
    {
      "id": 8,
      "line": 0,
      "label": "THEN"
    },
    {
      "id": 9,
      "line": 9,
      "label": "break;"
    },
    {
      "id": 10,
      "line": 0,
      "label": "ELSE"
    },
    {
      "id": 11,
      "line": 0,
      "label": "FOLLOW-1"
    },
    {
      "id": 12,
      "line": 11,
      "label": "position++"
    },
    {
      "id": 13,
      "line": 0,
      "label": "ELSE"
    },
    {
      "id": 14,
      "line": 13,
      "label": "int c = str.codePointAt( position )"
    },
    {
      "id": 15,
      "line": 14,
      "label": "if (c > maxDelimCodePoint || !isDelimiter( c ))"
    },
    {
      "id": 16,
      "line": 0,
      "label": "THEN"
    },
    {
      "id": 17,
      "line": 15,
      "label": "break;"
    },
    {
      "id": 18,
      "line": 0,
      "label": "ELSE"
    },
    {
      "id": 19,
      "line": 0,
      "label": "FOLLOW-2"
    },
    {
      "id": 20,
      "line": 17,
      "label": "position += Character.charCount( c )"
    },
    {
      "id": 21,
      "line": 20,
      "label": "return position;"
    },
    {
      "id": 22,
      "line": 0,
      "label": "exit"
    }
  ],

  "edges": [
    {
      "id": 0,
      "source": 0,
      "target": 1,
      "label": ""
    },
    {
      "id": 1,
      "source": 0,
      "target": 2,
      "label": ""
    },
    {
      "id": 2,
      "source": 2,
      "target": 3,
      "label": "True"
    },
    {
      "id": 3,
      "source": 3,
      "target": 4,
      "label": ""
    },
    {
      "id": 4,
      "source": 4,
      "target": 5,
      "label": "True"
    },
    {
      "id": 5,
      "source": 5,
      "target": 6,
      "label": ""
    },
    {
      "id": 6,
      "source": 5,
      "target": 7,
      "label": ""
    },
    {
      "id": 7,
      "source": 7,
      "target": 8,
      "label": "True"
    },
    {
      "id": 8,
      "source": 8,
      "target": 9,
      "label": ""
    },
    {
      "id": 9,
      "source": 7,
      "target": 10,
      "label": "False"
    },
    {
      "id": 10,
      "source": 10,
      "target": 11,
      "label": ""
    },
    {
      "id": 11,
      "source": 11,
      "target": 12,
      "label": ""
    },
    {
      "id": 12,
      "source": 4,
      "target": 13,
      "label": "False"
    },
    {
      "id": 13,
      "source": 13,
      "target": 14,
      "label": ""
    },
    {
      "id": 14,
      "source": 13,
      "target": 15,
      "label": ""
    },
    {
      "id": 15,
      "source": 15,
      "target": 16,
      "label": "True"
    },
    {
      "id": 16,
      "source": 16,
      "target": 17,
      "label": ""
    },
    {
      "id": 17,
      "source": 15,
      "target": 18,
      "label": "False"
    },
    {
      "id": 18,
      "source": 18,
      "target": 19,
      "label": ""
    },
    {
      "id": 19,
      "source": 19,
      "target": 20,
      "label": ""
    },
    {
      "id": 20,
      "source": 0,
      "target": 21,
      "label": ""
    },
    {
      "id": 21,
      "source": 0,
      "target": 22,
      "label": ""
    }
  ]
}
