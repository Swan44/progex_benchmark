{
  "directed": true,
  "label": "CDG of Vector3DOrthogonal.java",
  "type": "Control Dependence Graph (CDG)",
  "file": "Vector3DOrthogonal.java",

  "nodes": [
    {
      "id": 0,
      "line": 2,
      "label": "Vector3D orthogonal()"
    },
    {
      "id": 1,
      "line": 4,
      "label": "double threshold = 0.6 * getNorm()"
    },
    {
      "id": 2,
      "line": 5,
      "label": "if (threshold == 0)"
    },
    {
      "id": 3,
      "line": 0,
      "label": "THEN"
    },
    {
      "id": 4,
      "line": 6,
      "label": "throw new ArithmeticException('null norm');"
    },
    {
      "id": 5,
      "line": 0,
      "label": "ELSE"
    },
    {
      "id": 6,
      "line": 0,
      "label": "FOLLOW-1"
    },
    {
      "id": 7,
      "line": 9,
      "label": "if ((x >= -threshold) && (x <= threshold))"
    },
    {
      "id": 8,
      "line": 0,
      "label": "THEN"
    },
    {
      "id": 9,
      "line": 10,
      "label": "double inverse = 1 / Math.sqrt(y * y + z * z)"
    },
    {
      "id": 10,
      "line": 11,
      "label": "return new Vector3D(0, inverse * z, -inverse * y);"
    },
    {
      "id": 11,
      "line": 0,
      "label": "ELSE"
    },
    {
      "id": 12,
      "line": 12,
      "label": "if ((y >= -threshold) && (y <= threshold))"
    },
    {
      "id": 13,
      "line": 0,
      "label": "THEN"
    },
    {
      "id": 14,
      "line": 13,
      "label": "double inverse  = 1 / Math.sqrt(x - x + z * z)"
    },
    {
      "id": 15,
      "line": 14,
      "label": "return new Vector3D(-inverse * z, 0, inverse * x);"
    },
    {
      "id": 16,
      "line": 0,
      "label": "ELSE"
    },
    {
      "id": 17,
      "line": 0,
      "label": "FOLLOW-2"
    },
    {
      "id": 18,
      "line": 16,
      "label": "double inverse = 1 / Math.sqrt(x * x + y * y)"
    },
    {
      "id": 19,
      "line": 17,
      "label": "return new Vector3D(inverse * y, -inverse * x, 0);"
    },
    {
      "id": 20,
      "line": 0,
      "label": "exit"
    }
  ],

  "edges": [
    {
      "id": 0,
      "source": 0,
      "target": 1,
      "label": ""
    },
    {
      "id": 1,
      "source": 0,
      "target": 2,
      "label": ""
    },
    {
      "id": 2,
      "source": 2,
      "target": 3,
      "label": "True"
    },
    {
      "id": 3,
      "source": 3,
      "target": 4,
      "label": ""
    },
    {
      "id": 4,
      "source": 2,
      "target": 5,
      "label": "False"
    },
    {
      "id": 5,
      "source": 5,
      "target": 6,
      "label": ""
    },
    {
      "id": 6,
      "source": 6,
      "target": 7,
      "label": ""
    },
    {
      "id": 7,
      "source": 7,
      "target": 8,
      "label": "True"
    },
    {
      "id": 8,
      "source": 8,
      "target": 9,
      "label": ""
    },
    {
      "id": 9,
      "source": 8,
      "target": 10,
      "label": ""
    },
    {
      "id": 10,
      "source": 7,
      "target": 11,
      "label": "False"
    },
    {
      "id": 11,
      "source": 11,
      "target": 12,
      "label": ""
    },
    {
      "id": 12,
      "source": 12,
      "target": 13,
      "label": "True"
    },
    {
      "id": 13,
      "source": 13,
      "target": 14,
      "label": ""
    },
    {
      "id": 14,
      "source": 13,
      "target": 15,
      "label": ""
    },
    {
      "id": 15,
      "source": 12,
      "target": 16,
      "label": "False"
    },
    {
      "id": 16,
      "source": 16,
      "target": 17,
      "label": ""
    },
    {
      "id": 17,
      "source": 17,
      "target": 18,
      "label": ""
    },
    {
      "id": 18,
      "source": 17,
      "target": 19,
      "label": ""
    },
    {
      "id": 19,
      "source": 0,
      "target": 20,
      "label": ""
    }
  ]
}
